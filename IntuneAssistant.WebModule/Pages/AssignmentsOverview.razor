@page "/assignments-overview"
@using IntuneAssistant.Infrastructure.Interfaces
@using IntuneAssistant.Models
@using Microsoft.IdentityModel.Tokens
@using IntuneAssistant.Constants
@using IntuneAssistant.Web.Helpers
@using Microsoft.Extensions.Caching.Memory
@inject IAssignmentsService AssignmentsService
@inject IAssignmentFiltersService AssignmentFilterService
@inject ICompliancePoliciesService CompliancePoliciesService
@inject IConfigurationPolicyService ConfigurationPolicyService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IMemoryCache Cache
<PageTitle>Global Assignments Overview</PageTitle>

<h1>Global Assignments Overview</h1>
<MudTable Items="@_assignments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Striped="@_striped" LoadingProgressColor="Color.Success" Filter="new Func<CustomAssignmentsModel, bool>(Filter)">
    <ToolBarContent>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search & hit enter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Resource Type</MudTh>
        <MudTh>Resource Name</MudTh>
        <MudTh>Assignment Type</MudTh>
        <MudTh>Filter Type</MudTh>
        <MudTh>Filter Name</MudTh>
    </HeaderContent>
    <LoadingContent>
        <MudText Typo="Typo.body2" Class="mt-4 mud-text-secondary">Loading Data...</MudText>
    </LoadingContent>
    <RowTemplate>
        <MudTd>@context.ResourceType</MudTd>
        <MudTd>@context.ResourceName</MudTd>
        <MudTd>@context.AssignmentType</MudTd>
        <MudTd>@context.FilterType</MudTd>
        <MudTd>@context.FilterId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    public string? _accessToken;
    List<CustomAssignmentsModel>? _assignments = new();
    List<AssignmentFiltersModel>? allFiltersInfo;
    List<CompliancePolicyModel>? _compliancePolicies;
    List<ConfigurationPolicyModel>? _configurationPolicies;
    private readonly bool _striped = true;
    private bool _loading = true;
    public string searchString { get; set; }
    private bool Filter(CustomAssignmentsModel assignment) => IsVisible(assignment, searchString);

    public bool IsVisible(CustomAssignmentsModel assignment, string searchString)
    {
        if (string.IsNullOrEmpty(searchString))
            return true;

        if (assignment.ResourceType.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.ResourceName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.ResourceId.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.TargetName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.FilterId.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.FilterType.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
            return true;

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        _accessToken = await LocalStorage.GetItemAsync<string>("accessToken");

        if (_assignments.IsNullOrEmpty() && TokenHelper.TokenIsValid(_accessToken))
        {
            var configurationPolicies = await ConfigurationPolicyService.GetConfigurationPoliciesListAsync(_accessToken);
            var compliancePolicies = await CompliancePoliciesService.GetCompliancePoliciesListAsync(_accessToken);


            var fetchTasks = new List<Task<List<CustomAssignmentsModel>?>>
            {
                AssignmentsService.GetConfigurationPolicyAssignmentsListAsync(_accessToken, null, configurationPolicies),
                AssignmentsService.GetCompliancePoliciesAssignmentsListAsync(_accessToken, null, compliancePolicies),
                AssignmentsService.GetDeviceManagementScriptsAssignmentsListAsync(_accessToken, null),
                AssignmentsService.GetHealthScriptsAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetAutoPilotAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetMobileAppAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetManagedApplicationAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetTargetedAppConfigurationsAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetAppProtectionAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetUpdateRingsAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetFeatureUpdatesAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetWindowsDriverUpdatesAssignmentsByGroupListAsync(_accessToken, null),
                AssignmentsService.GetMacOsShellScriptsAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetDiskEncryptionAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetUpdatesForMacAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetPlatformScriptsAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetDevicePlatformRestrictionsAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetDeviceLimitRestrictionsAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetMacOsCustomAttributesAssignmentListAsync(_accessToken, null),
                AssignmentsService.GetIosLobAppProvisioningAssignmentListAsync(_accessToken, null),
            };
            allFiltersInfo = await AssignmentFilterService.GetAssignmentFiltersListAsync(_accessToken);
            var results = await Task.WhenAll(fetchTasks);
            foreach (var result in results.SelectMany(x => x))
            {
                var filterInfo = allFiltersInfo?.Find(g => g.Id == result.FilterId);
                var filterName = filterInfo?.DisplayName ?? "No filter";
                result.FilterId = filterName;
                _assignments.Add(result);
            }
            _loading = false;
        }
        else
        {
    // Handle token retrieval failure
    // This could occur if the user is not authenticated
    // or if there's an issue with token retrieval
    // You can implement your error handling logic here
            Console.WriteLine("Token retrieval failed");
            NavigationManager.NavigateTo(WebAppConfiguration.LOGIN_URL);
        }
    }

}