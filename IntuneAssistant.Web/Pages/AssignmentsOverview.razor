@page "/assignments-overview"
@using IntuneAssistant.Infrastructure.Interfaces
@using IntuneAssistant.Models
@using Microsoft.IdentityModel.Tokens
@inject IAssignmentsService AssignmentsService
@inject ICompliancePoliciesService CompliancePoliciesService
@inject IConfigurationPolicyService ConfigurationPolicyService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Global Assignments Overview</PageTitle>

<h1>Global Assignments Overview</h1>
<div class="form-group">
    <input class="form-control" type="text" placeholder="Filter..."
           @bind="Filter"
           @bind:event="oninput">
</div>
@if (_accessToken.IsNullOrEmpty())
{
    <p>Loading...</p>
}
else
{
    <SpinLoader IsLoading="IsLoading" Spinner="SpinnerType.Wave">
    </SpinLoader>
    <button @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
    <button @onclick="NextPage" disabled="@(_currentPage == TotalPages)">Next</button>
    <p>Page @_currentPage of @TotalPages</p>
        <table class="table">
            <thead>
                <tr>
                    <th>Resource Type</th>
                    <th>Resource Name</th>
                    <th>Assignment Type</th>
                    <th>Filter Id</th>
                    <th>Filter Type</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var assignment in PagedAssignments)
                {
                    <tr>
                        <td>@assignment.ResourceType</td>
                        <td>@assignment.ResourceName</td>
                        <td>@assignment.AssignmentType</td>
                         <td>@assignment.FilterId</td>
                         <td>@assignment.FilterType</td>
                    </tr>
                }
            </tbody>
        </table>
}
@code {
    public string _accessToken;
    List<CustomAssignmentsModel>? _assignments = new();
    List<CompliancePolicyModel>? _compliancePolicies;
    List<ConfigurationPolicyModel>? _configurationPolicies;
    bool IsLoading = true;
    public string Filter { get; set; }
    public bool IsVisible(CustomAssignmentsModel assignment)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (assignment.ResourceType.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.ResourceName.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.ResourceId.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.TargetName.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.FilterId.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.FilterType.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    }
    private int _currentPage = 1;
    private int _itemsPerPage = 10;

    private int TotalPages => (_assignments.Count + _itemsPerPage - 1) / _itemsPerPage;

    private List<CustomAssignmentsModel> PagedAssignments => _assignments
        .Where(assignment => IsVisible(assignment))  // Apply the filter before paginating
        .Skip((_currentPage - 1) * _itemsPerPage)
        .Take(_itemsPerPage)
        .ToList();

    private void NextPage()
    {
        if (_currentPage < TotalPages)
        {
            _currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        _accessToken = await LocalStorage.GetItemAsync<string>("accessToken");
        if (!_accessToken.IsNullOrEmpty())
        {
            var fetchCompliancePoliciesAsync = FetchCompliancePoliciesAsync(_accessToken);
            var fetchConfigurationPoliciesAsync = FetchConfigurationPoliciesAsync(_accessToken);

    // Start tasks concurrently and wait for all to complete
            await Task.WhenAll(fetchCompliancePoliciesAsync,fetchConfigurationPoliciesAsync);
            IsLoading = false;
            StateHasChanged();
        }
        else
        {
    // Handle token retrieval failure
    // This could occur if the user is not authenticated
    // or if there's an issue with token retrieval
    // You can implement your error handling logic here
            Console.WriteLine("Token retrieval failed");
        }
    }
    private async Task FetchConfigurationPoliciesAsync(string accessToken)
    {
        try
        {
            // Fetch compliance policies using your service
       
            _configurationPolicies = await ConfigurationPolicyService.GetConfigurationPoliciesListAsync(accessToken);
            if (_configurationPolicies is not null)
            {
                var policyAssignments = await AssignmentsService.GetConfigurationPolicyAssignmentsListAsync(accessToken, null, _configurationPolicies);
                foreach (var policy in policyAssignments)
                {
                    _assignments.Add(policy);
                }
            }
        }
        catch (Exception ex)
        {
    // Handle any errors that occur during policy retrieval
            Console.WriteLine($"Error fetching compliance policies: {ex.Message}");
        }
    }
    private async Task FetchCompliancePoliciesAsync(string accessToken)
    {
        try
        {
    // Fetch compliance policies using your service
            _compliancePolicies = await CompliancePoliciesService.GetCompliancePoliciesListAsync(accessToken);
            if (_compliancePolicies is not null)
            {
                var policyAssignments = await AssignmentsService.GetCompliancePoliciesAssignmentsListAsync(accessToken, null, _compliancePolicies);
                foreach (var policy in policyAssignments)
                {
                    _assignments.Add(policy);
                }
        
            }
        }
        catch (Exception ex)
        {
    // Handle any errors that occur during policy retrieval
            Console.WriteLine($"Error fetching compliance policies: {ex.Message}");
        }
    }
}