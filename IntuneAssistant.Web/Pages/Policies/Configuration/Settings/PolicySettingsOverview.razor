@page "/policy-settings-overview"

@using IntuneAssistant.Infrastructure.Interfaces
@using IntuneAssistant.Models
@using Microsoft.IdentityModel.Tokens
@using IntuneAssistant.Constants
@using IntuneAssistant.Extensions
@using IntuneAssistant.Web.Constants
@using IntuneAssistant.Web.Helpers
@inject IConfigurationPolicyService ConfigurationPolicyService

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject HttpClient Http

<PageTitle>Policy Settings Overview</PageTitle>

<MudText Typo="Typo.h5">Policy Settings Overview</MudText>
<br/>
<MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Download" @onclick="@ClickExportXLS" Color="Color.Primary">Export to XLS</MudButton>
<MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Refresh" @onclick="@RefreshData" Color="Color.Primary">Refresh Data</MudButton>

<MudTable Items="@_settingsOverview" FixedHeader="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Striped="@_striped" LoadingProgressColor="Color.Primary" Filter="new Func<CustomPolicySettingsModel, bool>(Filter)">
    <ToolBarContent>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search & hit enter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Policy Name</MudTh>
        <MudTh>Setting Name</MudTh>
        <MudTh>Setting Value</MudTh>
        <MudTh>Sub Settings</MudTh>
    </HeaderContent>
    <LoadingContent>
        <MudText Typo="Typo.body2" Class="mt-4 mud-text-secondary">Loading Data...</MudText>
    </LoadingContent>
    <RowTemplate>
        <MudTd>@context.PolicyName</MudTd>
        <MudTd>@context.SettingName</MudTd>
        <MudTd>@context.SettingValue</MudTd>
        <MudTd>
            @foreach (var childSetting in context.ChildSettingInfo)
            {
                <MudText Typo="Typo.body2" Align="Align.Left">
                    <b>@childSetting.Name: </b> - @childSetting.Value
                </MudText>
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private async void ClickExportXLS()
    {
        var xls = new ExportData();
        await xls.GeneratePolicySettingsOverviewXlsAsync(js, _settingsOverview, "GlobalPolicySettingsOverview.xlsx");
    }
    public string? _accessToken;
    List<CustomPolicySettingsModel>? _settingsOverview = new();
    List<CompliancePolicyModel>? _compliancePolicies;
    List<ConfigurationPolicyModel>? _configurationPolicies;
    private readonly bool _striped = true;
    private bool _loading = true;
    public string searchString { get; set; }
    private bool Filter(CustomPolicySettingsModel setting) => IsVisible(setting, searchString);

    public bool IsVisible(CustomPolicySettingsModel setting, string searchString)
    {
        if (string.IsNullOrEmpty(searchString))
            return true;

        if (setting.PolicyName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            (setting?.SettingValue != null && setting.SettingName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase)) ||
            (setting?.SettingValue != null && setting.SettingValue.Contains(searchString, StringComparison.CurrentCultureIgnoreCase)))
            return true;
        
        if (setting?.ChildSettingInfo != null && setting.ChildSettingInfo.Any(childSetting => childSetting.Name.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) || childSetting.Value.Contains(searchString, StringComparison.CurrentCultureIgnoreCase)))
            return true;

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        _loading = true;
        _accessToken = await LocalStorage.GetItemAsync<string>("accessToken");

        if (_accessToken != null && _settingsOverview.IsNullOrEmpty() && TokenHelper.TokenIsValid(_accessToken))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _accessToken);
            if (_settingsOverview.IsNullOrEmpty() && TokenHelper.TokenIsValid(_accessToken))
            {
                var configurationPolicies = await Http.GetFromJsonAsync<List<ConfigurationPolicyModel>>($"{IntuneAssistantApiUrls.BASE_APIURL}/v1/policies/configuration");
                if (configurationPolicies != null)
                {
                    var configurationPoliciesSettingsResults = await Http.PostAsJsonAsync($"{IntuneAssistantApiUrls.BASE_APIURL}/v1/policies/configuration/settings", configurationPolicies);


                    if (configurationPoliciesSettingsResults.IsSuccessStatusCode)
                    {
                        var settings = await configurationPoliciesSettingsResults.Content.ReadFromJsonAsync<List<CustomPolicySettingsModel>>();
    
                        if (settings != null)
                        {
                            foreach (var setting in settings)
                            {
                                _settingsOverview.Add(setting);
                            }
                        }
                    }
                    else
                    {
    // Handle error
                        Console.WriteLine($"Error: {configurationPoliciesSettingsResults.StatusCode}");
                    }
                    _loading = false;
                }
            }
            else
            {
    // Handle token retrieval failure
    // This could occur if the user is not authenticated
    // or if there's an issue with token retrieval
    // You can implement your error handling logic here
                Console.WriteLine("Token retrieval failed");
                NavigationManager.NavigateTo(WebAppConfiguration.LOGIN_URL);
            }
        }
    }

    private async Task RefreshData()
    {
    // Clear the existing data
        _settingsOverview.Clear();

        await FetchData();
    }
}