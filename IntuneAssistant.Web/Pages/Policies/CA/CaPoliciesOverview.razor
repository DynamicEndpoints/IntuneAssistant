@page "/policies/ca"
@using Microsoft.IdentityModel.Tokens
@using IntuneAssistant.Web.Helpers
@using IntuneAssistant.Web.Constants
@using Newtonsoft.Json
@using System.Text
@using IntuneAssistant.Models
@inject IDialogService DialogService
@using IntuneAssistant.Models.Policies.CA
@using IntuneAssistant.Web.Extensions

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http

@inject IJSRuntime js
<PageTitle>Conditional Policies Overview</PageTitle>

<MudText Typo="Typo.h5">Conditional Policies Overview</MudText>
<br/>
<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.ImportExport" @onclick="@ClickExportXLS" Title="Export to CSV"/>
        <MudIconButton Icon="@Icons.Material.Outlined.Refresh" @onclick="@RefreshData" Title="Refresh Data"/>
        <MudIconButton Icon="@Icons.Material.Outlined.Download" @onclick="@DownloadResources" Title="Download"/>
        <MudSpacer/>
    </MudToolBar>
</MudPaper>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
    }
<br/>
<MudDataGrid SelectedItems="@selectedItems" T="ConditionalAccessPolicyModel" DragDropColumnReordering="true" Loading="_loading" LoadingProgressColor="Color.Primary" Items="@_resources" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@QuickFilter" Hideable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All conditional access assignments</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="ConditionalAccessPolicyModel"/>
        <TemplateColumn Title="Display Name">
            <CellTemplate>
                @if (context.Item.Id != null)
                {
                    var policyId = context.Item.Id.ToString();
                    <MudLink OnClick="() => NavigateToPolicy(policyId)">@context.Item.DisplayName</MudLink>
                }
                else
                {
                    <text>@context.Item.DisplayName</text>
                }
            </CellTemplate>
        </TemplateColumn>
       <TemplateColumn Title="State">
           <CellTemplate>
               @if (context.Item.State == "enabled")
               {
                   <MudTooltip Text="Enabled">
                       <MudIcon Color="Color.Success" Icon="@Icons.Material.Outlined.CheckCircle" />
                     </MudTooltip>
               }
               else if (context.Item.State == "enabledForReportingButNotEnforced")
               {
                   <MudTooltip Text="Enabled for reporting but not enforced">
                       <MudIcon Color="Color.Warning" Icon="@Icons.Material.Outlined.Warning" />
                     </MudTooltip>
               }
               else
               {
                   <MudTooltip Text="Disabled">
                       <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.ErrorOutline" />
                   </MudTooltip>
               }
           </CellTemplate>
       </TemplateColumn>
        <TemplateColumn Title="Included Users">
            <CellTemplate>
                @foreach (var user in context.Item.Conditions.Users.IncludeUsersReadable)
                    {
                        <MudText>@user.DisplayName</MudText>
                    }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Excluded Users">
            <CellTemplate>
                @foreach (var user in context.Item.Conditions.Users.ExcludeUsersReadable)
                    {
                        <MudText>@user.DisplayName</MudText>
                    }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Excluded Groups">
            <CellTemplate>
                @foreach (var group in context.Item.Conditions.Users.ExcludeGroupsReadable)
                    {
                        Guid groupLink;
                        if (Guid.TryParse((string)group.Id, out groupLink))
                        {
                            <MudLink OnClick="@(async () => await GetGroupMembersAndShowDialog(groupLink, group.DisplayName))">@group.DisplayName</MudLink>
                        }
                        else
                        {
                            <MudText>@group.DisplayName</MudText>
                        }
                    }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.ModifiedDateTime" Title="Last Modified DateTime" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.CreatedDateTime" Title="Created DateTime" Sortable="true" Filterable="true"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ConditionalAccessPolicyModel"/>
    </PagerContent>
</MudDataGrid>

@code {
    public string? _errorMessage;
    
    private HashSet<ConditionalAccessPolicyModel> selectedItems = new();

    private async void ClickExportXLS()
    {
    //     var xls = new ExportData();
    //     await xls.GetGenerateAssignmentsOverviewXlsAsync(js, _resources, "GlobalAssignmentsOverview.xlsx");
    }

    private string _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<ConditionalAccessPolicyModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.DisplayName.Length;
        else
            return x.DisplayName;
    };


    // quick filter - filter globally across multiple columns with the same input
    private Func<ConditionalAccessPolicyModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.DisplayName.Contains(_searchString, StringComparison.CurrentCultureIgnoreCase))
            return true;

        return false;
    };

    public string? _accessToken;
    List<ConditionalAccessPolicyModel>? _resources = new();
    private readonly bool _striped = true;
    private bool _loading = true;


    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        _loading = true;
        _accessToken = await LocalStorage.GetItemAsync<string>("accessToken");

        if (_accessToken != null && _resources.IsNullOrEmpty() && TokenHelper.TokenIsValid(_accessToken))
        {
            var fetchTasks = new List<Task<List<ConditionalAccessPolicyModel>?>>
            {
                FetchCaPolicies()
            };
            await Task.WhenAll(fetchTasks);

            _loading = false;
        }
        else
        {
    // Handle token retrieval failure
    // This could occur if the user is not authenticated
    // or if there's an issue with token retrieval
    // You can implement your error handling logic here
            Console.WriteLine("Token retrieval failed");
            NavigationManager.NavigateTo(WebAppConfiguration.LOGIN_URL);
        }
    }

    private async Task<List<ConditionalAccessPolicyModel>?> FetchCaPolicies()
    {
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _accessToken);

        try
        {
            var response = await Http.GetAsync($"https://localhost:7224/v1/policies/ca");

            if (!response.IsSuccessStatusCode)
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                var errorData = JsonConvert.DeserializeObject<ResponseModel>(errorResponse);
                _errorMessage = errorData.Message;
                if (_errorMessage.Contains("consent"))
                {
                    await ConsentApplication();
                }
                return null;
            }

            var responseStream = await response.Content.ReadAsStreamAsync();
            using var sr = new StreamReader(responseStream);
    
            var content = await sr.ReadToEndAsync();
            var result = JsonConvert.DeserializeObject<List<ConditionalAccessPolicyModel>>(content);

            if (string.IsNullOrWhiteSpace(content) || content[0] != '[')
            {
                _errorMessage = "The server returned an invalid response.";
                return null;
            }
            

            if (result != null) _resources?.AddRange(result);
            return _resources;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            return null;
        }
    }

    private async Task RefreshData()
    {
    // Clear the existing data
        _resources.Clear();

        await FetchData();
    }

    private async Task DownloadResources()
    {
        foreach (var item in selectedItems)
        {
    // Convert the item to a JSON string
            var jsonString = JsonConvert.SerializeObject(item);

    // Convert the JSON string to a byte array
            var jsonBytes = Encoding.UTF8.GetBytes(jsonString);

    // Call the JavaScript function to save the file
            var result = await js.InvokeAsync<string>("saveFile", new object[] { $"{item.DisplayName}.json", jsonBytes });
            Console.WriteLine(result);
        }
    }
    
    private async Task ConsentApplication()
    {
    // Use JS Interop to open a new window with the consent URL
        var consentUrl = $"https://login.microsoftonline.com/organizations/adminconsent?client_id=131386a4-d462-4270-ac50-7ebc4685da14&redirect_uri=https://localhost:7074";
        await js.InvokeVoidAsync("open", consentUrl, "_blank");
    }
    
    private async Task GetGroupMembersAndShowDialog(Guid targetId, string targetName)
    {
        await DialogService.ShowGroupMembersDialog(targetId, targetName);
    }

    void NavigateToPolicy(string policyId)
    {
        var url = $"/policies/ca/{policyId}";
        NavigationManager.NavigateTo(url);
    }

}