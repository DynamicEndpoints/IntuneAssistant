@page "/upload"
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using CsvHelper
@using IntuneAssistant.Models
@using IntuneAssistant.Models.Assignments
@using IntuneAssistant.Web.Helpers
@using Microsoft.IdentityModel.Tokens
@using Newtonsoft.Json
@using JsonSerializer = Newtonsoft.Json.JsonSerializer
@using System.Globalization
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@inject HttpClient Http


<h3>Upload CSV File</h3>

<EditForm Model="uploadModel" OnValidSubmit="HandleValidSubmit">
    <InputFile @bind-Value="uploadModel.File" OnChange="HandleFileSelected"></InputFile>
    <button type="submit">Upload</button>
</EditForm>

@if (uploadModel.File != null)
{
    <p>File: @uploadModel.File.Name</p>
}

<PageTitle>Migration Overview</PageTitle>

<MudText Typo="Typo.h5">Migration Overview</MudText>
<br/>
<MudDataGrid T="AssignmentMigrationModel" DragDropColumnReordering="true" Loading="_loading" LoadingProgressColor="Color.Primary" Items="@_policyComparisons" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" Hideable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All assignments</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
        
    </ToolBarContent>
    <Columns>
        <SelectColumn T="AssignmentMigrationModel"/>
        <PropertyColumn Property="x => x.CurrentPolicyName" Title="Policy Name" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.CurrentPolicyAssignments" Title="Group to check" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.ReplacementPolicyName" Title="Replacement policy" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.MigrationNeeded" Title="Needs Migration" Sortable="true" Filterable="true"/>
        <TemplateColumn Title="State">
                   <CellTemplate>
                       @if (context.Item.MigrationNeeded == true)
                       {
                           <MudTooltip Text="MakeItSO:)">
                               <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.ArrowRight" />
                             </MudTooltip>
                       }
                       else
                       {
                           <MudTooltip Text="Yes">
                               <MudIcon Color="Color.Success" Icon="@Icons.Material.Outlined.CheckCircle" />
                           </MudTooltip>
                       }
                   </CellTemplate>
               </TemplateColumn>
        
    </Columns>
    <PagerContent>
        <MudDataGridPager T="AssignmentMigrationModel"/>
    </PagerContent>
</MudDataGrid>


@code {
    private List<AssignmentMigrationModel>? _policyComparisons = new List<AssignmentMigrationModel>();
    private UploadModel uploadModel = new UploadModel();
    private string responseContent;
    public string? _accessToken;
    private bool _loading = false;
    private string _searchString;
    private bool _sortNameByLength;

    // custom sort by name length
    private Func<CustomAssignmentsModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.ResourceName.Length;
        else
            return x.ResourceName;
    };

    // quick filter - filter globally across multiple columns with the same input
    private Func<AssignmentMigrationModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.CurrentPolicyName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.CurrentPolicyAssignments.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ReplacementPolicyName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private class UploadModel
    {
        public IBrowserFile File { get; set; }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadModel.File = e.File;
    }

    
    private async Task HandleValidSubmit()
    {
        if (uploadModel.File != null)
        {
            _loading = true;
            _accessToken = await LocalStorage.GetItemAsync<string>("accessToken");

            if (_accessToken != null && _policyComparisons.IsNullOrEmpty() && TokenHelper.TokenIsValid(_accessToken))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _accessToken);

                using var reader = new StreamReader(uploadModel.File.OpenReadStream());
                var fileContent = await reader.ReadToEndAsync(); // Read the file content asynchronously

                using var csvReader = new CsvReader(new StringReader(fileContent), CultureInfo.InvariantCulture); // Parse the string synchronously
                var records = csvReader.GetRecords<AssignmentCsvModel>().ToList();

                await FetchData(records);
                StateHasChanged(); // Notify Blazor that the state has changed
                _loading = false;
            }
        }
    }

    private async Task<List<AssignmentMigrationModel>> FetchData(List<AssignmentCsvModel> records)
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7224/v1/assignments/compare", records);
        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStreamAsync();
            using var sr = new StreamReader(responseStream);
            var content = await sr.ReadToEndAsync();
            var result = JsonConvert.DeserializeObject<List<AssignmentMigrationModel>>(content);

            if (result != null)
            {
                Console.WriteLine($"cout{result.Count}");
                _policyComparisons?.AddRange(result);
                StateHasChanged();
            }
        }
        
        return _policyComparisons;
    }

    private void MakeItSo(AssignmentMigrationModel policyComparison)
    {
    // Implement the logic for the "Make It So" button here
    }

}