@page "/group-assignments"
@using IntuneAssistant.Infrastructure.Interfaces
@using IntuneAssistant.Models
@using Microsoft.Graph.Beta.Models
@using Microsoft.IdentityModel.Tokens
@inject IAssignmentsService AssignmentsService
@inject IAssignmentFiltersService AssignmentFilterService
@inject IGroupInformationService GroupInformationService
@inject ICompliancePoliciesService CompliancePoliciesService
@inject IConfigurationPolicyService ConfigurationPolicyService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudText Typo="Typo.h3">Group Assignments Overview</MudText>
<MudTextField Label="Filter..." @bind-Value="Filter" @bind-Value:event="oninput" Variant="Variant.Outlined" Class="my-3" />
<MudProgressCircular Indeterminate="IsLoading" />
<MudButton OnClick="PreviousPage" Disabled="@(_currentPage == 1)">Previous</MudButton>
<MudButton OnClick="NextPage" Disabled="@(_currentPage == TotalPages)">Next</MudButton>
<MudText>Page @_currentPage of @TotalPages</MudText>
<MudTable T="CustomAssignmentsModel">
    <MudThead>
        <MudTr>
            <MudTh>Resource Type</MudTh>
            <MudTh>Resource Name</MudTh>
            <MudTh>Resource Id</MudTh>
            <MudTh>Target Id</MudTh>
            <MudTh>Target Name</MudTh>
            <MudTh>Filter Type</MudTh>
            <MudTh>Filter Name</MudTh>
        </MudTr>
    </MudThead>
    <MudTbody>
        @foreach (var assignment in PagedAssignments)
        {
            if (!IsVisible(assignment))
                continue;
            var filterInfo = allFiltersInfo?.Find(g => g.Id == assignment.FilterId);
            var filterName = filterInfo?.DisplayName ?? "No filter";
            var target = allGroupsInfo.Find(g => g?.Id == assignment.TargetId);
            string targetFriendly = target?.DisplayName ?? "No target found";
            assignment.TargetName = targetFriendly;
            <MudTr>
                <MudTd>@assignment.ResourceType</MudTd>
                <MudTd>@assignment.ResourceName</MudTd>
                <MudTd>@assignment.ResourceId</MudTd>
                <MudTd>@target.Id</MudTd>
                <MudTd>@targetFriendly</MudTd>
                <MudTd>@assignment.FilterType</MudTd>
                <MudTd>@assignment.FilterId</MudTd>
            </MudTr>
        }
    </MudTbody>
</MudTable>

@code {
    public string _accessToken;
    List<CustomAssignmentsModel>? _assignments = new();
    List<DeviceAndAppManagementAssignmentFilter>? allFiltersInfo;
    List<GroupModel> allGroupsInfo;
    bool IsLoading = true;

    public string Filter { get; set; }
    public bool IsVisible(CustomAssignmentsModel assignment)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (assignment.ResourceType.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.ResourceName.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.ResourceId.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.TargetName.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.FilterId.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
            assignment.FilterType.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    }
    
    private int _currentPage = 1;
    private int _itemsPerPage = 10;

    private int TotalPages => (_assignments.Count + _itemsPerPage - 1) / _itemsPerPage;

   
    private List<CustomAssignmentsModel> PagedAssignments
    {
        get
        {
            var assignments = _assignments
                .Where(assignment => IsVisible(assignment))  // Apply the filter before paginating
                .Skip((_currentPage - 1) * _itemsPerPage)
                .Take(_itemsPerPage)
                .ToList();

    // Log the number of assignments and the first few items for debugging
            Console.WriteLine($"Number of assignments: {assignments.Count}");
            foreach (var assignment in assignments.Take(5))
            {
                Console.WriteLine($"Assignment: {assignment.ResourceType}, {assignment.ResourceName}, {assignment.ResourceId}");
            }

            return assignments;
        }
    }
    
    private void NextPage()
    {
        if (_currentPage < TotalPages)
        {
            _currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }
   
    
    protected override async Task OnInitializedAsync()
    {
        try
        {

            _accessToken = await LocalStorage.GetItemAsync<string>("accessToken");
            if (!_accessToken.IsNullOrEmpty())
            {

                var fetchCompliancePoliciesAsync = FetchCompliancePoliciesAsync(_accessToken, null);
                var fetchConfigurationPoliciesAsync = FetchConfigurationPoliciesAsync(_accessToken, null);

                var results = await Task.WhenAll(fetchCompliancePoliciesAsync, fetchConfigurationPoliciesAsync);

                foreach (var result in results.SelectMany(r => r).Where(a => a.AssignmentType == "group"))
                {
                    _assignments.Add(result);
                }
                allGroupsInfo = await GetGroupInformationListAsync();
                IsLoading = false;
                StateHasChanged();
    // Search in every group assignment for unique group ID values. For every group ID, search for group information.
            }
            else
            {
    // Handle token retrieval failure
    // This could occur if the user is not authenticated
    // or if there's an issue with token retrieval
    // You can implement your error handling logic here
                _accessToken = null;
            }
        }
        catch (PlatformNotSupportedException ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
    }
    
    
    private async Task<List<DeviceAndAppManagementAssignmentFilter>?> GetAssignmentFiltersListAsync()
    {
        allFiltersInfo = await AssignmentFilterService.GetAssignmentFiltersListAsync(_accessToken);
        return allFiltersInfo;
    }

    private async Task<List<GroupModel>?> GetGroupInformationListAsync()
    {
        var uniqueGroupIds = _assignments.DistinctBy(d => d.TargetId).Select(t => t.TargetId)
            .ToList();
    // Search in every group assignment for unique group ID values. For every group ID, search for group information.
        var allGroupsInfo =
            await GroupInformationService.GetGroupInformationByIdsCollectionListAsync(_accessToken,
                uniqueGroupIds);
        Console.WriteLine($"Got {_assignments.Count}");
        return allGroupsInfo;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchCompliancePoliciesAsync(string accessToken, GroupModel? groupInfo)
    {
        var compliancePolicies =
            await CompliancePoliciesService.GetCompliancePoliciesListAsync(accessToken);
        var complianceResults = await AssignmentsService.GetCompliancePoliciesAssignmentsListAsync(accessToken, groupInfo, compliancePolicies);
        return complianceResults.Where(r => r.AssignmentType == "group").ToList();
    }

    private async Task<List<CustomAssignmentsModel>?> FetchConfigurationPoliciesAsync(string accessToken, GroupModel groupInfo)
    {
        var configPolicies = await ConfigurationPolicyService.GetConfigurationPoliciesListAsync(accessToken);
        var configurationResults = new List<CustomAssignmentsModel>();
        if (configPolicies is not null)
        {
            configurationResults =
                await AssignmentsService.GetConfigurationPolicyAssignmentsListAsync(accessToken, groupInfo,
                    configPolicies);
        }
        return configurationResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDeviceScriptsAsync(string accessToken, GroupModel groupInfo)
    {
        var deviceScriptsResults = await AssignmentsService.GetDeviceManagementScriptsAssignmentsListAsync(accessToken, groupInfo);
        return deviceScriptsResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchHealthScriptsAsync(string accessToken, GroupModel groupInfo)
    {
        var healthScriptsResults = await AssignmentsService.GetHealthScriptsAssignmentsByGroupListAsync(accessToken, groupInfo);
        return healthScriptsResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchAutoPilotAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var autoPilotResults = await AssignmentsService.GetAutoPilotAssignmentsByGroupListAsync(accessToken, groupInfo);
        return autoPilotResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchAppProtectionAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var appProtectionResults = await AssignmentsService.GetAppProtectionAssignmentsByGroupListAsync(accessToken, groupInfo);
        return appProtectionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchMobileAppAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var mobileAppResults = await AssignmentsService.GetMobileAppAssignmentsByGroupListAsync(accessToken, groupInfo);
        return mobileAppResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchTargetAppAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var targetAppResults = await AssignmentsService.GetTargetedAppConfigurationsAssignmentsByGroupListAsync(accessToken, groupInfo);
        return targetAppResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchUpdateRingsAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var updateRingResults =
            await AssignmentsService.GetUpdateRingsAssignmentsByGroupListAsync(accessToken, groupInfo);
        return updateRingResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchFeatureUpdateAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var featureUpdateResults =
            await AssignmentsService.GetFeatureUpdatesAssignmentsByGroupListAsync(accessToken, groupInfo);
        return featureUpdateResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDriverUpdateAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var driverUpdateResults =
            await AssignmentsService.GetWindowsDriverUpdatesAssignmentsByGroupListAsync(accessToken, groupInfo);
        return driverUpdateResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchMacOsScriptAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var macOsShellScriptResults =
            await AssignmentsService.GetMacOsShellScriptsAssignmentListAsync(accessToken, groupInfo);
        return macOsShellScriptResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDiskEncryptionAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var diskEncyrptionResults =
            await AssignmentsService.GetDiskEncryptionAssignmentListAsync(accessToken, groupInfo);
        return diskEncyrptionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchUpdatePoliciesForMacAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var updatesForMacResults =
            await AssignmentsService.GetUpdatesForMacAssignmentListAsync(accessToken, groupInfo);
        return updatesForMacResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchPlatformScriptAssignmentsListAsync(string accessToken, GroupModel groupInfo)
    {
        var updatesForMacResults =
            await AssignmentsService.GetPlatformScriptsAssignmentListAsync(accessToken, groupInfo);
        return updatesForMacResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchManagedAppPolicyAssignmentListAsync(string accessToken, GroupModel groupInfo)
    {
        var managedAppResults =
            await AssignmentsService.GetManagedApplicationAssignmentListAsync(accessToken, groupInfo);
        return managedAppResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDeviceEnrollmentRestrictionsAssignmentListAsync(string accessToken, GroupModel groupInfo)
    {
        var platformRestrictionResults =
            await AssignmentsService.GetDevicePlatformRestrictionsAssignmentListAsync(accessToken, groupInfo);
        return platformRestrictionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDeviceLimitRestrictionsAssignmentListAsync(string accessToken, GroupModel groupInfo)
    {
        var limitRestrictionResults =
            await AssignmentsService.GetDeviceLimitRestrictionsAssignmentListAsync(accessToken, groupInfo);
        return limitRestrictionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchMacOsCustomAttributesAssignmentListAsync(string accessToken, GroupModel groupInfo)
    {
        var macOsCustomAttributesAssignmentResults =
            await AssignmentsService.GetMacOsCustomAttributesAssignmentListAsync(accessToken, groupInfo);
        return macOsCustomAttributesAssignmentResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchIosLobAppProvisioningAssignmentListAsync(string accessToken, GroupModel groupInfo)
    {
        var iosLobAppProvisioningAssignmentResults =
            await AssignmentsService.GetIosLobAppProvisioningAssignmentListAsync(accessToken, groupInfo);
        return iosLobAppProvisioningAssignmentResults;
    }

}