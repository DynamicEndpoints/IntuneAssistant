@page "/group-assignments"
@using IntuneAssistant.Infrastructure.Interfaces
@using IntuneAssistant.Models
@using IntuneAssistant.Web.Helpers
@using IntuneAssistant.Constants
@inject IAssignmentsService AssignmentsService
@inject IAssignmentFiltersService AssignmentFilterService
@inject IGroupInformationService GroupInformationService
@inject ICompliancePoliciesService CompliancePoliciesService
@inject IConfigurationPolicyService ConfigurationPolicyService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<PageTitle>Group Assignments Overview</PageTitle>
<h1>Group Assignments Overview</h1>
<MudTable Items="@_assignments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" Striped="@_striped" LoadingProgressColor="Color.Success" Filter="new Func<CustomAssignmentsModel,bool>(Filter)">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search & hit enter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
    <HeaderContent>
        <MudTh>Resource Type</MudTh>
        <MudTh>Resource Name</MudTh>
        <MudTh>Resource Id</MudTh>
        <MudTh>Target Id</MudTh>
        <MudTh>Target Name</MudTh>
        <MudTh>Filter Type</MudTh>
        <MudTh>Filter Name</MudTh>
    </HeaderContent>
    <LoadingContent>
        <MudText Typo="Typo.body2" Class="mt-4 mud-text-secondary">Loading Data...</MudText>
    </LoadingContent>
    <RowTemplate>
        <MudTd>@context.ResourceType</MudTd>
        <MudTd>@context.ResourceName</MudTd>
        <MudTd>@context.ResourceId</MudTd>
        <MudTd>@context.TargetId</MudTd>
        <MudTd>@context.TargetName</MudTd>
        <MudTd>@context.FilterType</MudTd>
        <MudTd>@context.FilterId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    </MudTable>


@code {
    public string? _accessToken;
    readonly List<CustomAssignmentsModel>? _assignments = new();
    List<AssignmentFiltersModel>? allFiltersInfo;
    List<GroupModel> allGroupsInfo;
    private readonly bool _striped = true;
    private bool _loading = true;
    
    public string searchString { get; set; }
    private bool Filter(CustomAssignmentsModel assignment) => IsVisible(assignment, searchString);
    public bool IsVisible(CustomAssignmentsModel assignment, string searchString)
    {
        if (string.IsNullOrEmpty(searchString))
            return true;

        if (assignment.ResourceType.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.ResourceName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.ResourceId.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.TargetName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.FilterId.Contains(searchString, StringComparison.CurrentCultureIgnoreCase) ||
            assignment.FilterType.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
            return true;
        
        return false;
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _accessToken = await LocalStorage.GetItemAsync<string>("accessToken");
            
            if (_accessToken != null & TokenHelper.TokenIsValid(_accessToken))
                {
                    allFiltersInfo = await GetAssignmentFiltersListAsync();
                    var results = await Task.WhenAll(
                        FetchAllTasksAsync(_accessToken, null));
                    
                    allGroupsInfo = await GetGroupInformationListAsync(results.SelectMany(x => x).Where(r => r.TargetId.Length > 0).ToList());
                    foreach (var result in results.SelectMany(r => r).Where(a => a.AssignmentType == "group"))
                    {
                        var filterInfo = allFiltersInfo?.Find(g => g.Id == result.FilterId);
                        var filterName = filterInfo?.DisplayName ?? "No filter";
                        var target = allGroupsInfo?.Find(g => g.Id == result.TargetId);
                        var targetFriendly = target?.DisplayName ?? result.TargetId;
                        result.TargetName = targetFriendly;
                        result.FilterId = filterName;
                        _assignments?.Add(result);
                    }
    // Search in every group assignment for unique group ID values. For every group ID, search for group information.
            }
            else
            {
    // Handle token retrieval failure
    // This could occur if the user is not authenticated
    // or if there's an issue with token retrieval
    // You can implement your error handling logic here
                _accessToken = null;
                NavigationManager.NavigateTo($"{WebAppConfiguration.LOGIN_URL}");
            }
        }
        catch (PlatformNotSupportedException ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
        finally
        {
            _loading = false; // Set loading to false after data has been loaded
        }
    }
    
    private async Task<List<CustomAssignmentsModel>?> FetchAllTasksAsync(string? accessToken, GroupModel? groupInfo)
    {
        var fetchTasks = new List<Task<List<CustomAssignmentsModel>?>>
        {
            FetchCompliancePoliciesAsync(accessToken, groupInfo),
            FetchConfigurationPoliciesAsync(accessToken, groupInfo),
            FetchDeviceScriptsAsync(accessToken, groupInfo),
            FetchHealthScriptsAsync(accessToken, groupInfo),
            FetchAutoPilotAssignmentsListAsync(accessToken, groupInfo),
            FetchAppProtectionAssignmentsListAsync(accessToken, groupInfo),
            FetchMobileAppAssignmentsListAsync(accessToken, groupInfo),
            FetchTargetAppAssignmentsListAsync(accessToken, groupInfo),
            FetchUpdateRingsAssignmentsListAsync(accessToken, groupInfo),
            FetchFeatureUpdateAssignmentsListAsync(accessToken, groupInfo),
            FetchDriverUpdateAssignmentsListAsync(accessToken, groupInfo),
            FetchMacOsScriptAssignmentsListAsync(accessToken, groupInfo),
            FetchDiskEncryptionAssignmentsListAsync(accessToken, groupInfo),
            FetchUpdatePoliciesForMacAssignmentsListAsync(accessToken, groupInfo),
            FetchPlatformScriptAssignmentsListAsync(accessToken, groupInfo),
            FetchManagedAppPolicyAssignmentListAsync(accessToken, groupInfo),
            FetchDeviceEnrollmentRestrictionsAssignmentListAsync(accessToken, groupInfo),
            FetchDeviceLimitRestrictionsAssignmentListAsync(accessToken, groupInfo),
            FetchMacOsCustomAttributesAssignmentListAsync(accessToken, groupInfo),
            FetchIosLobAppProvisioningAssignmentListAsync(accessToken, groupInfo)
        };

        // Wait for all tasks to complete
        var results = await Task.WhenAll(fetchTasks);

        // Process the results if needed
        // For example, you can concatenate all the lists into a single list
        var allModels = results.Where(x => x != null).SelectMany(x => x).ToList();
       
        return allModels;
    }
    
    private async Task<List<AssignmentFiltersModel>?> GetAssignmentFiltersListAsync()
    {
        allFiltersInfo = await AssignmentFilterService.GetAssignmentFiltersListAsync(_accessToken);
        return allFiltersInfo;
    }

    private async Task<List<GroupModel>?> GetGroupInformationListAsync(List<CustomAssignmentsModel> assignments )
    {
        var uniqueGroupIds = assignments.DistinctBy(d => d.TargetId).Select(t => t.TargetId)
            .ToList();
    // Search in every group assignment for unique group ID values. For every group ID, search for group information.
        var allGroupsInfo =
            await GroupInformationService.GetGroupInformationByIdsCollectionListAsync(_accessToken,
                uniqueGroupIds);
        Console.WriteLine($"Got {assignments.Count}");
        return allGroupsInfo;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchCompliancePoliciesAsync(string? accessToken, GroupModel? groupInfo)
    {
        var compliancePolicies =
            await CompliancePoliciesService.GetCompliancePoliciesListAsync(accessToken);
        var complianceResults = await AssignmentsService.GetCompliancePoliciesAssignmentsListAsync(accessToken, groupInfo, compliancePolicies);
        return complianceResults.Where(r => r.AssignmentType == "group").ToList();
    }

    private async Task<List<CustomAssignmentsModel>?> FetchConfigurationPoliciesAsync(string? accessToken, GroupModel? groupInfo)
    {
        var configPolicies = await ConfigurationPolicyService.GetConfigurationPoliciesListAsync(accessToken);
        var configurationResults = new List<CustomAssignmentsModel>();
        if (configPolicies is not null)
        {
            configurationResults =
                await AssignmentsService.GetConfigurationPolicyAssignmentsListAsync(accessToken, groupInfo,
                    configPolicies);
        }
        return configurationResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDeviceScriptsAsync(string? accessToken, GroupModel? groupInfo)
    {
        var deviceScriptsResults = await AssignmentsService.GetDeviceManagementScriptsAssignmentsListAsync(accessToken, groupInfo);
        return deviceScriptsResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchHealthScriptsAsync(string? accessToken, GroupModel? groupInfo)
    {
        var healthScriptsResults = await AssignmentsService.GetHealthScriptsAssignmentsByGroupListAsync(accessToken, groupInfo);
        return healthScriptsResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchAutoPilotAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var autoPilotResults = await AssignmentsService.GetAutoPilotAssignmentsByGroupListAsync(accessToken, groupInfo);
        return autoPilotResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchAppProtectionAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var appProtectionResults = await AssignmentsService.GetAppProtectionAssignmentsByGroupListAsync(accessToken, groupInfo);
        return appProtectionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchMobileAppAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var mobileAppResults = await AssignmentsService.GetMobileAppAssignmentsByGroupListAsync(accessToken, groupInfo);
        return mobileAppResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchTargetAppAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var targetAppResults = await AssignmentsService.GetTargetedAppConfigurationsAssignmentsByGroupListAsync(accessToken, groupInfo);
        return targetAppResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchUpdateRingsAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var updateRingResults =
            await AssignmentsService.GetUpdateRingsAssignmentsByGroupListAsync(accessToken, groupInfo);
        return updateRingResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchFeatureUpdateAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var featureUpdateResults =
            await AssignmentsService.GetFeatureUpdatesAssignmentsByGroupListAsync(accessToken, groupInfo);
        return featureUpdateResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDriverUpdateAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var driverUpdateResults =
            await AssignmentsService.GetWindowsDriverUpdatesAssignmentsByGroupListAsync(accessToken, groupInfo);
        return driverUpdateResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchMacOsScriptAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var macOsShellScriptResults =
            await AssignmentsService.GetMacOsShellScriptsAssignmentListAsync(accessToken, groupInfo);
        return macOsShellScriptResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDiskEncryptionAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var diskEncyrptionResults =
            await AssignmentsService.GetDiskEncryptionAssignmentListAsync(accessToken, groupInfo);
        return diskEncyrptionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchUpdatePoliciesForMacAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var updatesForMacResults =
            await AssignmentsService.GetUpdatesForMacAssignmentListAsync(accessToken, groupInfo);
        return updatesForMacResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchPlatformScriptAssignmentsListAsync(string? accessToken, GroupModel groupInfo)
    {
        var updatesForMacResults =
            await AssignmentsService.GetPlatformScriptsAssignmentListAsync(accessToken, groupInfo);
        return updatesForMacResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchManagedAppPolicyAssignmentListAsync(string? accessToken, GroupModel groupInfo)
    {
        var managedAppResults =
            await AssignmentsService.GetManagedApplicationAssignmentListAsync(accessToken, groupInfo);
        return managedAppResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDeviceEnrollmentRestrictionsAssignmentListAsync(string? accessToken, GroupModel groupInfo)
    {
        var platformRestrictionResults =
            await AssignmentsService.GetDevicePlatformRestrictionsAssignmentListAsync(accessToken, groupInfo);
        return platformRestrictionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchDeviceLimitRestrictionsAssignmentListAsync(string? accessToken, GroupModel groupInfo)
    {
        var limitRestrictionResults =
            await AssignmentsService.GetDeviceLimitRestrictionsAssignmentListAsync(accessToken, groupInfo);
        return limitRestrictionResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchMacOsCustomAttributesAssignmentListAsync(string? accessToken, GroupModel groupInfo)
    {
        var macOsCustomAttributesAssignmentResults =
            await AssignmentsService.GetMacOsCustomAttributesAssignmentListAsync(accessToken, groupInfo);
        return macOsCustomAttributesAssignmentResults;
    }

    private async Task<List<CustomAssignmentsModel>?> FetchIosLobAppProvisioningAssignmentListAsync(string? accessToken, GroupModel groupInfo)
    {
        var iosLobAppProvisioningAssignmentResults =
            await AssignmentsService.GetIosLobAppProvisioningAssignmentListAsync(accessToken, groupInfo);
        return iosLobAppProvisioningAssignmentResults;
    }

}