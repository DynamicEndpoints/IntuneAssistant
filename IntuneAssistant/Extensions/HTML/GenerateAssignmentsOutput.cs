using IntuneAssistant.Constants;
using IntuneAssistant.Models;
using System;
using System.IO;
using System.Text;
using System.Web;

namespace IntuneAssistant.Extensions.HTML;

/// <summary>
/// Provides utility methods for managing and manipulating HTML templates.
/// </summary>
public static class HtmlTemplateHelper
{
    public static string CreateHtmlPage(string tenantId, string body = "[[body]]")
        {
            return $@"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Intune Report</title>
    <style>
        * {{
            margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

body {{
    font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    line-height: 1.6;
    background-color: #f9f9f9;
    color: #333;
    margin: 0;
    padding: 0;
}}

.container {{
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}}

.header {{
    font-size: 2em;
    color: #EA3323;
    margin-bottom: 10px;
}}

.under-title {{
    font-size: 0.8em;
    color: #aaa;
    margin-bottom: 20px;
}}

.assignments-list {{
    list-style-type: none;
    padding: 0;
}}

.assignments-list li {{
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 10px;
    padding: 15px;
}}

.assignments-list th,
.assignments-list td {{
    padding: 8px 10px;
}}

.footer {{
    font-size: 0.8em;
    color: #aaa;
    text-align: center;
    margin-top: 20px;
}}

@media only screen and (max-width: 600px) {{
    .container {{
                padding: 10px;
            }}
            }}
    </style>
</head>
<body>
    <h1 class=""header"">Intune report generated by IntuneCLI</h1>
    <p class=""under-title"">For tenant: {tenantId}</p>

    {body}

    <span class=""footer"">{DateTime.UtcNow.ToLongDateString()} - Copyright &copy 2024 - Generated By IntuneCLI </span>
</body>
</html>
";
        }
         public static string GenerateAssignmentsOverview(List<CustomAssignmentsModel> assignments)
            {
                var sb = new StringBuilder();
        
                sb.AppendLine($"<h4>Assignments</h4>\n");
                sb.AppendLine("<ul>");
                sb.AppendLine("<table>");
                sb.AppendLine("<tr>");
                sb.AppendLine("<th>ResourceName</th>");
                sb.AppendLine("<th>ResourceType</th>");
                sb.AppendLine("<th>AssignmentType</th>");
                sb.AppendLine("</tr>");
                foreach (var assignment in assignments)
                {
                    sb.AppendLine("<tr>");
                    sb.AppendLine("<td>" + assignment.ResourceName + "</td>");
                    sb.AppendLine("<td>" + assignment.ResourceType + "</td>");
                    sb.AppendLine("<td>" + assignment.AssignmentType + "</td>");
                    sb.AppendLine("<td>" + assignment.FilterId + "</td>");
                    sb.AppendLine("<td>" + assignment.FilterType + "</td>");
                    sb.AppendLine("</tr>");
                }
        
                sb.AppendLine("</table>");
        
                return sb.ToString();
            }
         public static string GenerateAssignmentsByGroupOverview(List<CustomAssignmentsModel> assignments)
         {
             var sb = new StringBuilder();
        
             sb.AppendLine($"<h4>Assignments By Group</h4>\n");
             sb.AppendLine("<ul>");
             sb.AppendLine("<table>");
             sb.AppendLine("<tr>");
             sb.AppendLine("<th>ResourceName</th>");
             sb.AppendLine("<th>ResourceType</th>");
             sb.AppendLine("<th>AssignmentType</th>");
             sb.AppendLine("</tr>");
             foreach (var assignment in assignments)
             {
                 sb.AppendLine("<tr>");
                 sb.AppendLine("<td>" + assignment.ResourceName + "</td>");
                 sb.AppendLine("<td>" + assignment.ResourceType + "</td>");
                 sb.AppendLine("<td>" + assignment.TargetName + "</td>");
                 sb.AppendLine("<td>" + assignment.FilterId + "</td>");
                 sb.AppendLine("<td>" + assignment.FilterType + "</td>");
                 sb.AppendLine("</tr>");
             }
        
             sb.AppendLine("</table>");
        
             return sb.ToString();
         }
}